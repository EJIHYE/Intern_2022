"""
-----------------  Question  -----------------
지뢰찾기 게임은 M x N 매트릭스에 위치해 있는 지뢰를 찾는 게임이다.
M x N 매트릭스 상의 격자(square)는 지뢰이거나 지뢰가 아니다.
지뢰 격자는 *로 표시한다. 지뢰가 아닌 격자(square)는 숫자로 표시하며 그 숫자는 인접해 있는 지뢰의 수를 의미한다.
(격자(sqaure)는 최대 8개의 인접한 지뢰를 가질 수 있다.)
다음은 4x4 매트릭스에서 2개의 지뢰(*)를 표시하는 방법이다.
 *...
 ....
 .*..
 ....

이 게임의 목표는 지뢰의 위치(*)를 제외한 나머지 격자들의 숫자를 맞추는 것이다.
위 경우의 답은 아래와 같다.
 *100
 2210
 1*10
 1110

입력 : 첫번째 줄은 M x N 의 M(행)과 N(열)에 해당되는 숫자이다.
       N과 M은 0보다 크고 100 이하이다(0< N, M <=100).
       그 다음 M개의 줄이 차례로 입력되고 각 줄은 정확하게 N개의 문자가 입력된다.
       지뢰 격자는 *로 표시하며 지뢰가 아닌 격자는 .(dot)로 표시한다.
출력 : 지뢰(*)를 제외한 나머지 격자의 숫자값을 찾아서 M x N 매트릭스를 출력한다.
----------------------------------------------
"""
"""
==========================================================================
과제 1. input의 숫자만큼 '*'과 '.'으로 구성된 문자열을 출력하시오. 
      - 조건1 : random 모듈을 활용하시오.
      - input = '4'
      - 출력 : *.** 또는 ...* 등등
==========================================================================
"""
import random                                     # 랜덤 모듈 사용

repeat_num = int(input("반복할 횟수를 입력하세요: "))  # 반복할 횟수를 변수에 저장
result_lst = []                             # 결과 값을 저장할 리스트 생성

random_lst = ['*', '.']                     # 무작위로 반복할 문자를 리스트에 저장
for i in range(repeat_num):                 # 입력한 횟수만큼 반복
    result = random.choice(random_lst)      # 문자를 저장한 리스트에서 무작위로 문자를 선정한다
    result_lst.append(result)               # 해당 결과 값을 리스트에 저장

print(''.join(result_lst))                  # 리스트를 문자열로 합쳐서 출력

"""
==========================================================================
과제 2. 행과 열을 입력하면 '*'과 '.'으로 구성된 행렬을 출력하시오.
      - 조건1 : random 모듈을 활용하시오.
      - 조건2 : 행과 열은 1보다 크고 100 이하인 정수이다.
      - row = 3
      - column = 6
      - 출력 (예시이며 random 모듈을 사용하였으므로 결과는 다를 수 있음.)
        [['*', '.', '.', '.', '*', '.'], 
        ['.', '.', '*', '.', '.', '.'],
        ['.', '.', '.', '*', '.', '*']]
==========================================================================
"""
import random

row = 3                     # 행 지정
column = 6                  # 열 지정
random_lst = ['*', '.']     # 랜덤으로 생성할 문자 리스트 생성

lst_add = []                # 완성된 하나의 문자열을 저장할 리스트 생성

for j in range(row):        # 행만큼 반복

    result_lst = []         # 결과값을 저장할 리스트 생성

    for i in range(column):                  # 열 만큼 반복
        result = random.choice(random_lst)   # 결과 값은 random_lst에서 하나씩 무작위로 뽑은 문자
        result_lst.append(result)            # 문자를 하나씩 저장


    lst_add.append(result_lst)               # 완성된 문자 리스트를 다시 리스트에 저장장
print(*lst_add, sep = '\n')      # 리스트 각 요소를 한 줄씩 구분해서 출력

"""
==========================================================================
#과제 3. 과제2에서 생성한 행렬을 이용하여 지뢰(*)를 제외한 나머지 격자의 숫자값을 찾고 행렬을 출력하시오.
      - 조건1 : random 모듈을 활용하시오.
      - 조건2 : 행과 열은 1보다 크고 100 이하인 정수이다.
      - row = 3
      - column = 6
      - 출력 (예시이며 random 모듈을 사용하였으므로 결과는 다를 수 있음.)
        *212*1
        12*332
        012*2*
==========================================================================
"""

import random

row = 3
column = 6
random_lst = ['*', '.']

lst_add = []

for j in range(row):

    result_lst = []

    for i in range(column):
        result = random.choice(random_lst)
        result_lst.append(result)


    lst_add.append(result_lst)
print(*lst_add, sep= '\n')


line_change = []                        # 최종 행렬을 저장할 리스트 생성

for r in range(row):                    # 행만큼 반복
    findmine = []                       # 계산한 결과값을 저장할 리스트 생성
    for c in range(column):             # 열만큼 반복
        if lst_add[r][c] == '*':        # 리스트에 저장된 행렬의 r번쨰 요소의 c번째 값이 '*'이라면
            findmine.append('*')        # 최종 결과 값을 *로 저장
        else:                           # 리스트에 저장된 행렬의 r번쨰 요소의 c번째 값이 '.'이라면
            cnt = 0                     # 지뢰를 찾아 값을 하나씩 더할 변수 생성
            try:                # 예외 처리
                for left in range(3):                                                               # 해당 값의 왼쪽 줄의 3개 값에서 지뢰 찾기
                    if lst_add[r - 1 + left][c - 1] == '*' and r - 1 + left >= 0 and c - 1 >= 0:    # 인덱스 값이 0 이상인 경우와 해당 위치가 '*'인 경우
                            cnt += 1                                                                # cnt에 1씩 더함
            except IndexError:  # 인덱스 에러가 나는 경우
                pass            # 건너뛴 후 다시 for left 반복문으로 돌아감
            try:                # 예외 처리
                for right in range(3):                                                              # 해당 값의 오른쪽 줄의 3개 값에서 지뢰 찾기
                    if lst_add[r - 1 + right][c + 1] == '*' and r - 1 + right >= 0 and c + 1 >= 0:  # 인덱스 값이 0 이상인 경우와 해당 위치가 '*'인 경우
                        cnt += 1                                                                    # cnt에 1씩 더함
            except IndexError:
                pass
            try:                # 예외 처리
                for updown in range(r - 1, r + 2, 2):                               # 해당 값의 위 아래 값에서 지뢰 찾기 ( r - 1과 r + 2인 경우만 반복하기 위해 2씩 증가시킴)
                    if lst_add[updown][c] == '*' and updown >= 0 and c >= 0:        # 인덱스 값이 0 이상인 경우와 해당 위치가 '*'인 경우
                            cnt += 1                                                # cnt에 1씩 더함
            except IndexError:
                pass
            findmine.append(cnt)         # 계산 결과를 리스트에 저장
        cnt_join = ''.join(map(str, findmine))  # 저장한 리스트를 하나의 문자열로 합침



    line_change.append(cnt_join)    # 각 문자열을 다시 리스트에 저장
print(*line_change, sep= '\n')      # 줄 바꿔서 출력






