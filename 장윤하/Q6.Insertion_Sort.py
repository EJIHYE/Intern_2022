"""
위 그림은 {5,2,4,6,1,3} 이라는 배열을 소트하는 방법을 보여준다.
배열의 두번째 인덱스부터 시작하여 시작한 인덱스(검정색 블록) 좌측의 항목 중 자신이 들어가야 할 위치를 판단(소트되도록)하여 이동 한다.
좌측의 배열 요소들은 본인보다 좌측에 값이 삽입되어 들어올 경우 한칸씩 우측으로 이동한다. 단, 삽입되어 들어오는 요소(그림에서 검정색 블록)가 있던 인덱스(원래의 위치)까지만 이동한다.
마지막 인덱스까지 위 과정을 반복한다.
이와 같은 기능을 하는 소트 프로그램을 작성하시오.

그림 설명 :
"""
"""
=============================================================================
과제 1. 위 문제의 알고리즘으로 배열을 정렬하시오. 
       - 조건 : 결과값을 저장하기 위해 새로운 리스트를 생성할 수 없다.
       - input = [5,2,6]
       - 출력 : [2,5,6]
=============================================================================
"""
lst = input("배열을 입력하세요: ").split(',')           # ','를 기준으로 나누어 리스트에 저장
for i in range(1, len(lst)):                         # 두 번째 인덱스부터 끝까지 반복
    for j in range(i):                               # 해당 인덱스의 앞글자만큼 반복
        if lst[j] < lst[i]:                          # 앞 글자가 해당 인덱스 글자보다 작은 경우
            pass                                     # 패스
        else:                                        # 앞 글자가 해당 인덱스 글자보다 큰 경우
            lst.insert(j, lst[i])                    # 그 앞에 해당 인덱스 글자를 삽입
            lst = lst[:(i + 1)] + lst[(i + 2):]      # 해당 인덱스 숫자를 제외하고 리스트에 삽입_ 해당 숫자의 인덱스는 i+1가 됨
            break                                    # 루프 중단

print(lst)

"""
=============================================================================
과제 2. 위 문제의 알고리즘으로 배열을 정렬하시오
       - 조건 : 결과값을 저장하기 위해 새로운 리스트를 생성할 수 없다.
       - input = [5,2,4,6,1,3]
       - 출력 : [1,2,3,4,5,6]
=============================================================================
"""
lst = input("배열을 입력하세요: ").split(',')
for i in range(1, len(lst)):
    for j in range(i):
        if lst[j] < lst[i]:
            pass
        else:
            lst.insert(j, lst[i])
            lst = lst[:(i + 1)] + lst[(i + 2):]
            break

print(lst)



